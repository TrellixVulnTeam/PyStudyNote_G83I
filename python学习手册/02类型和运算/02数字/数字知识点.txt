数字基本类型：
1>整数(有正负，可以无穷精度，一般十进制表示)：12，-23，0，9999999999999
二进制(0b开头)：0b11 ,转十进制:int('0b11',2 ) ->3  十进制转二进制：bin(3 ) ->'0b11'
八进制(0o开头)：0o14 ,转十进制:int('0o14',8 ) ->12 十进制转八进制：oct(12) ->'0o14'
16进制(0x开头)：0x1a ,转十进制:int('0x1a',16) ->26 十进制转八进制：hex(16) ->'0x1a'
注意：2/8/16进制都是用字符串表示的,要拿来计算前要先做相应转换

2>浮点数(带一个小数点)：1.23  .2
处理浮点数的精度问题：decimal模块->Decimal
处理分数表达：franctions模块->Franction

3>复数(实部(可省略)+虚部(以j/J结尾)):3+4j   4j
可以用内置函数创建:complex(real,imag): complex(3,4)  #3+4j

内置数学工具与扩展
    操作表达式：+，-，*，/，<<,=,==,!=，**，&...
    内置数学函数：pow,abs,round,int,hex,bin...
    公用模块：random,math...

Python表达式操作符
    yield x                     #生成器函数发送协议
    lambda args: expresion      #生成匿名函数
    x if y else z               #三元表达式
    x or y                      #逻辑运算或(x为假才会计算y)
    x and y                     #逻辑运算与(x为真才会计算y)
    not x                       #逻辑非
    x in y, x not in y          #成员关系(可迭代对象,集合)
    x is y, x is not y          #对象实体对比,对比对象内存位置
    x < y, x <= y, x > y, x >= y #大小比较,集合子集和超集相等性操作符
    x == y, x != y
    x | y                       #位或,集合并集
    x ^ y                       #位亦或,集合对称差(x和y中所有不相同的元素组成的集合)
    x & y                       #位与,集合交集
    x << y, x >> y              #位移
    x + y, x - y                #加法/合并,减法/集合差集
    x * y, x % y, x / y, x // y #乘法/重复,余数/格式化,除法,真除法/floor除法
    -x, +x                      #一元减法,识别
    ~x                          #按位求补(取反)
    x ** y                      #幂运算
    x[i]                        #索引,函数调用
    x[i:j:k]                    #分片
    x(...)                      #调用
    x.attr                      #列表
    (...)                       #元祖,表达式,生成器表达式
    [...]                       #列表,列表解析
    {...}                       #字典,集合,字典和集合解析

    混合操作依据操作符优先级执行,使用括号提升运算优先级
    数字混合类型运算时自动升级:40 + 3.14
    运算符重载
    数字显示的格式: '%4.2'%(1.234243432)
    浮点数和分数之间转换:
        z=Fraction(*(2.4).as_integer_ratio())   #z=Fraction.from_float(2.4)
        float(z)

注意：
a>x!=y
b>repr(x)
c>a/b会保留小数部分，a//b(floor除法) 5//2=2 -5//2=-3
d>x<y<z
e>x[i:j:k]
f>手动转换类型：int(),float()