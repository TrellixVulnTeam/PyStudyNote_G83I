导入只有第一次有效，重复导入无效,只是从内存中提取已经创建好对象，不会执行代码
import/from是赋值语句，将模块对象赋值给模块变量
当不同模块中有变量名相同的对象时，不使用from,直接用Import,可以用import来区分

1.模块的创建
    可用文本编辑器创建，任何以.py结尾的文本文件都会被自动认为是python模块
2.模块的使用
    1>import语句使用一个变量名引用这个模块对象，可用as进行别名，用"模块名.属性名"获取模块属性：import m as mm
    2>from语句会把变量名赋值到另一作用域：from m import x, y
    3>from *语句会拷贝模块所有变量名，可能会发生覆盖，不建议使用
    4>模块导入只发生一次，之后的导入无效
    5>import和from都是赋值语句
    6>import和from都会把模块写入到内存
3.模块命名空间
    1>文件生成命名空间
        a>模块语句会在首次导入时执行
        b>顶层的赋值语句会创建模块属性
        c>模块命名空间能通过__dict__或dir(m)获取
        d>模块是一个独立的作用域(其本地变量就是全局变量)
    2>属性名的点号运算
        a>简单变量：X是值在当前作用域内搜索变量名X(LEGB规则)
        b>点号运算：X.Y指搜索到的对象X之中的属性(并非在作用域内)
        c>多层点号运算:X.Y.Z指对象X中的变量Y的属性Z
        d>通用性：点号运算可用于任何具有属性的对象：模块，类，函数，C扩展类型等
    3>导入和作用域
        函数绝对无法看到其它函数内的变量名，除非他们从物理上处于这个函数内
        模块程序代码绝对无法看到其它模块内的变量名，除非明确地进行了导入
    4>命名空间的嵌套
        导入不会使命名空间发生向上的嵌套但是会发生向下的嵌套，如X与X.Y
4.模块重载
    1>reload函数会强制已加载的模块的代码重新执行，产生新的模块对象并覆盖内存中现有的，若代码发生变化可用其更新程序
    2>reload基础
        a>reload是python的内置函数而不是语句
        b>传给reload的是已经存在了的模块对象而不是变量名
        c>reload在python3中位于模块中，使用时必须导入
            import module
            from imp import reload
            reload(module)
        d>reload会在模块当前命名空间内执行模块文件的现有代码
        e>文件顶层赋值语句会使变量名变成新值
        f>重载会影响所有使用import读取了模块的客户端
        g>重载只会对以后使用from的程序造成影响
    3>作用
        a>若程序太大可选择动态重载减小影响
        b>在GUI中重载回掉函数，重载嵌入式python程序代码