import:导入模块
from:在导入模块时选择性导入
imp.reload:模块重载

1.为什么使用模块：代码重用，系统命名空间的划分，实现共享服务和数据

2.python程序架构
    1>如何组织一个程序：
        程序是作为一个主体的，顶层的文件来构造的，配合零个或多个支持文件(模块)
    2>导入和属性：通过导入模块获取模块属性
    3>标准库模块：
        python自带的模块，在标准python环境下自行导入使用
    4>import如何工作
        第一次导入文件时会执行三个步骤：找到模块文件->编译成位码->执行代码以创建相关对象
        若重复导入(在sys.modules会有记录)，会跳过上述过程直接从内存中提取现有的对象
        注意：from xxx import xxx语句也会执行模块总的所有代码再来提取所需对象
              python所有加载的模块信息都存放在sys.modules中，当import一个模块时会先到这里查找
    5>模块搜索路径
        a>用户自定义模块有自动导入搜索路径的特性，一般无需配置路径
        b>模块搜索路径有下述组合而成(结果存入sys.path):
            程序的主目录和程序顶层文件所在的目录
            PYTHONPATH目录(可选设置)，python环境变量设置的目录
            标准链接库目录，放置于python/Lib/sitepackages目录下
            上述目录中任何.pth文件内容(如果存在的话)
        c>配置搜索路径：在PYTHONPATH或.pth文件中用":"分隔或换行
        d>模块文件选择，import b形式的叙述可能会加载：
            源代码文件b.py
            字节码文件b.pyc
            目录b，包导入
            编译模块扩展(通常c或c++编写)，导入时使用动态链接(如linux中的b.so，Cygwin和windos的b.dll或b.pyd)
            用C编写好的内置模块，并通过静态链接到python
            ZIP文件组合，导入时自动解压
            内存内映射，对于frozen可执行文件
            java类，在jython版本的python中
            .NET组件，在IronPython版本的python中
3.高级模块概念
    可以使用导入钩子(import hook)重新自定义import操作，具体参考内置__import__函数说明
    支持最佳化字节码.pyo
    使用第三方工具distutils安装自定义模块，之后可在任意位置直接导入，无需路径，类似内置模块
        1.想要安装的模块代码(这里自定义了一个模块zjtools.py)
        2.根据上述编写一个setup.py文件
        3.将两者放在一个sys.path的路径下，用命令行进入该路径执行"setup.py install"命令
        4.安装完成，以后都可以像使用内置模块一样直接导入 import zjtools