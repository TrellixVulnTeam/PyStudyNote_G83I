1.基础知识
    运算符重载让类拦截常规的Python运算
    类可重载所有的Python表达式运算符
    类也可重载打印,函数调用，属性点号运算等内置运算
    重载使类实例对象的行为更像内置类型
    重载是通过提供特殊名称的类方法来实现的
2.常见的运算符重载方法
    方法                  重载          调用
    __init__            构造函数        对象建立:x = class(args)
    __del__             析构函数        X对象回收,del X
    __add__             运算符+         如果没有__iadd__,X + Y, X += Y
    __sub__             运算符-         X - Y, X -= Y
    __or__              运算符!(位OR)   如果没有__ior__, X | Y, X != Y
    __repr__,__str__    打印，转换       print(X), repr(X), str(X)
    __call__            函数调用         X(*args, **kargs)
    __getattr__         点号运算         X.name
    __setattr__         属性赋值语句     X.any = value
    __delattr__         属性删除         del X.any
    __getattribute__    属性获取         X.any
    __getitem__         索引运算         X[key],X[i:j],没__iter__时的for循环和其它迭代器
    __setitem__         索引赋值语句      X[key] = value, X[i:j] = sequence
    __delitem__         索引和分片删除    del X[key], del X[i:j]
    __len__             长度             len(X), 如果没有__bool__,真值测试
    __bool__            布尔测试          bool(X), 真测试，python2.6中叫__nonzero__
    __it__,__gt__       特定的比较        X<Y,X>Y,X<=Y,X>=Y,X==Y,X!=Y(在python2.6中只有__cmp__)
    __le__,__ge__
    __eq__,__ne__
    __radd__            右侧加法           other + X
    __iadd__            实地(增强的)加法   X += Y( or else __add__)
    __iter,__next__     迭代环境           I=iter(X), next(I)
    __contains__        成员关系测试       item in X
    __index__           整数值             hex(X), bin(X), OCT(X), 0[X],0[X:](替代python2中的__oct__,__hex__)
    __enter__,__exit__  环境管理器         with obj as var:
    __get__,__set__     查/改/删属性触发    X.attr, X.attr = value, del X.attr
    __delete__
    __new__             创建               在__init__之前创建对象
注意：__gettime__可以